application {
  //  http {
  //    port = 8080
  //  }
}


akka {
  # Log the complete configuration at INFO level when the actor system is started.
  # This is useful when you are uncertain of what configuration is used.
  log-config-on-start = off

  stdout-loglevel = "OFF"

  loglevel = "DEBUG"
  loggers = ["akka.event.slf4j.Slf4jLogger"]
  logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"


  log-dead-letters = on
  log-dead-letters-during-shutdown = off

  //  actor {
  //    provider = "cluster"
  //  }
  //
  //  cluster {
  //    seed-nodes = []
  //    seed-nodes = ${?SEED_NODES}
  //
  //    # auto downing is NOT safe for production deployments.
  //    # you may want to use it during development, read more about it in the docs.
  //    //    auto-down-unreachable-after = 10s
  //  }

  //  coordinated-shutdown.run-by-jvm-shutdown-hook = on //this is the default value
  //
  //  remote {
  //    log-remote-lifecycle-events = on
  //    artery {
  //      enabled = on
  //      transport = tcp                     # reason  to avoid udp for now https://github.com/akka/akka-samples/issues/83
  //      canonical.hostname = "127.0.0.1"    # external (logical) hostname
  //      canonical.hostname = ${?HOSTNAME}   # external (logical) hostname
  //      canonical.port = 2551               # external (logical) port
  //      canonical.port = ${?PORT}
  //      bind-hostname = 0.0.0.0   # internal (bind) hostname
  //    }
  //  }

  //  discovery {
  //    method = kubernetes-api
  //    method = ${?DISCOVERY_METHOD}
  //    kubernetes-api {
  //      pod-namespace = "default"
  //      pod-namespace = ${?K8S_NAMESPACE}
  //      pod-label-selector = "app=service-manager-cluster"
  //      pod-label-selector = ${?K8S_SELECTOR}
  //      pod-port-name = "management"
  //      pod-port-name = ${?K8S_MANAGEMENT_PORT}
  //    }
  //  }

  //  management {
  //    http {
  //      hostname = "127.0.0.1"
  //      hostname = ${?HOSTNAME}
  //      bind-hostname = "0.0.0.0"
  //      port = 8558
  //      bind-port = 8558
  //    }
  //    cluster.bootstrap {
  //      contact-point-discovery {
  //        required-contact-point-nr = 0 // TODO change that to n - 1 nodes
  //        required-contact-point-nr = ${?REQUIRED_CONTACT_POINTS}
  //      }
  //    }
}


//  persistence {
//    journal.plugin = "jdbc-journal"
//    snapshot-store.plugin = "jdbc-snapshot-store"
//  }


// TODO serialization schema
//  actor {
//    allow-java-serialization = off
//
//    serializers {
//      fst = "cluster.sharding.FstSerializer"
//    }
//
//    serialization-bindings {
//      "cluster.sharding.EntityMessage$Command" = fst
//      "cluster.sharding.EntityMessage$CommandAck" = fst
//      "cluster.sharding.EntityMessage$Query" = fst
//      "cluster.sharding.EntityMessage$QueryAck" = fst
//      "cluster.sharding.EntityMessage$QueryAckNotFound" = fst
//    }
//  }
//}

//jdbc-journal {
//  slick = ${slick}
//}
//
//# the akka-persistence-snapshot-store in use
//jdbc-snapshot-store {
//  slick = ${slick}
//}
//
//# the akka-persistence-query provider in use
//jdbc-read-journal {
//  slick = ${slick}
//}
//
//# general slick configuration
//slick {
//  profile = "slick.jdbc.PostgresProfile$"
//  db {
//    url = "jdbc:postgresql://localhost:5432/docker"
//    user = "docker"
//    password = "docker"
//    driver = "org.postgresql.Driver"
//
//    // hikariCP
//    numThreads = 5 // number of cores
//    maxConnections = 5 // 2 * numThreads + 1 (if running on an SSD)
//    minConnections = 1  // same as numThreads
//
//    connectionTestQuery = SELECT 1 // postgres doesnt support connection timeout
//  }
//}
